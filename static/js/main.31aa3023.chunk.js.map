{"version":3,"sources":["components/FileUploadForm.js","components/AnswerField.js","components/HangmanHealth.js","components/Keyboard.js","components/WordField.js","components/ExitButton.js","components/EndScreen.js","components/Credits.js","components/Settings.js","components/App.js","index.js"],"names":["FileUploadForm","props","FileUpload","useRef","react_default","a","createElement","id","errorMessage","onClick","e","current","click","onSubmit","wordsUploadSubmitHandler","type","name","ref","value","AnswerField","answerFieldFormHandler","method","HangmanHealth","faults","Fragment","src","concat","alt","Keyboard","alphabet","map","letter","Keyboard_Letter","key","letterGuess","picked","Letter","className","WordField","word","wordToGuess","letters","WordField_GuessingFieldLetter","visible","GuessingFieldLetter","ExitButton","exitGame","EndScreen","decision","gameRestart","components_ExitButton","Credits","toggleCredits","Settings","aviliableWords","pack","Settings_OnOffButton","enabled","used","toggleWordPacks","close","OnOffButton","App","state","Alphabet","words","haveWon","haveLost","gameStarted","uploadErrorMessage","wordPacksErrorMessage","showCredits","showSettings","_this$state","this","gameField","components_HangmanHealth","components_WordField","components_AnswerField","bind","components_Keyboard","preGameField","wordDraw","components_FileUploadForm","toggleSettings","game","components_EndScreen","components_Settings","saveWords","components_Credits","setTimeout","_this2","preventDefault","file","target","files","undefined","setState","fileReader","FileReader","lastWordId","onload","completeArray","result","split","stringWord","toLowerCase","letterIndex","length","slice","indexOf","fileUploaded","readAsText","wordPack","wordsAmount","DrawnWord","Math","floor","random","pickedLetter","newLetter","didGuess","wordToGuessLetters","checkGameState","answer","inputedWord","index","fromAnswerField","lettersInAWord","guessedLetters","filter","revealWord","lastID","extractedWords","forEach","wordPacks","Component","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.31aa3023.chunk.js","sourcesContent":["import React, { useRef } from 'react'\r\n\r\nconst FileUploadForm = props => {\r\n    const FileUpload = useRef(null)\r\n    const clickHandler = (e) => {\r\n        FileUpload.current.click()\r\n    }\r\n    return (\r\n        <div id=\"WordsUpload\">\r\n            <p>Dodaj własne słowa</p>\r\n            <p>{props.errorMessage}</p>\r\n            <button onClick={clickHandler}>Wybierz plik</button>\r\n            <form onSubmit={props.wordsUploadSubmitHandler}>\r\n                <input type=\"file\" name=\"file\" id=\"file\" ref={FileUpload} />\r\n                <input type=\"submit\" value=\"Wyślij\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default FileUploadForm","import React from 'react'\r\n\r\nconst AnswerField = props => {\r\n    return (\r\n        <div id='AnswerField'>\r\n            <form onSubmit={props.answerFieldFormHandler} method=\"POST\">\r\n                <input type=\"text\" name=\"answer\" id=\"answer\" />\r\n                <input type=\"submit\" value=\"Sprawdź odpowiedź\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnswerField;","import React from 'react'\r\n\r\nconst HangmanHealth = props => {\r\n    const { faults } = props\r\n    let image = [\"blank.png\", \"0.png\", \"1.png\", \"2.png\", \"3.png\", \"4.png\", \"5.png\", \"6.png\", \"6.png\"];\r\n    return (\r\n        <>\r\n            <img src={`./Images/${image[faults]}`} alt=\"health\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HangmanHealth","import React from 'react'\r\n\r\nconst Keyboard = props => {\r\n    return (\r\n        <div id='keyboard'>\r\n            {props.alphabet.map(letter => {\r\n                return (\r\n                    <Letter key={letter.id} letter={letter.letter} letterGuess={props.letterGuess} picked={letter.picked} />\r\n                )\r\n            })}\r\n\r\n            {/* {Object.keys(props.alphabet).map(i => {\r\n                return (\r\n                    <Letter key={props.alphabet[i].id} letter={props.alphabet[i].letter} letterGuess={props.letterGuess} picked={props.alphabet[i].picked} />\r\n                )\r\n            })} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keyboard;\r\n\r\nconst Letter = props => {\r\n    const { letter, picked, letterGuess } = props\r\n    return (\r\n        <div className={picked ? \"nonclickable letter\" : \"clickable letter\"} onClick={picked ? null : () => letterGuess(letter)}>\r\n            <span>{letter}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst WordField = props => {\r\n    const word = props.wordToGuess.letters.map(letter => {\r\n        return (\r\n            <GuessingFieldLetter key={letter.id} visible={letter.visible} letter={letter.letter} />\r\n        )\r\n    })\r\n    return (\r\n        <div id='WordField'>\r\n            {props.wordToGuess === null ? null : word}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordField;\r\n\r\nconst GuessingFieldLetter = props => {\r\n    const { visible, letter } = props\r\n    return (\r\n        <div className={letter === \" \" ? \"GuessingFieldLetter, noUnderline\" : \"GuessingFieldLetter\"}>\r\n            <span>{visible ? letter : null}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst ExitButton = (props) => {\r\n    return (\r\n        <>\r\n            <button onClick={props.exitGame}>Wyjdź z gry</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ExitButton;","import React from 'react'\r\nimport ExitButton from './ExitButton';\r\n\r\nconst EndScreen = props => {\r\n    return (\r\n        <div id=\"grayout\">\r\n            <div id=\"menu\">\r\n                <h1>{props.decision === \"won\" ? \"Wygrana\" : \"Przegrana\"}</h1>\r\n                <button onClick={props.gameRestart}>Zagraj jeszcze raz</button>\r\n                <ExitButton exitGame={props.exitGame} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndScreen;","import React from 'react'\r\n\r\nconst Credits = (props) => {\r\n    return (\r\n        <>\r\n            <h1>Strona wykonana przez Jakuba Filipka w oparciu o bibliotekę React.js</h1>\r\n            <button onClick={props.toggleCredits}>Zamknij</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Credits;","import React from 'react'\r\nimport '../css/OnOff.css'\r\n\r\nconst Settings = props => {\r\n    return (\r\n        <div id=\"grayout\">\r\n            <div id=\"settingsMenu\">\r\n                <h1>Dostępne paczki słów</h1>\r\n                {props.aviliableWords.map(pack => {\r\n                    return (\r\n                        <div className=\"pack\" key={pack.id}>\r\n                            <div className=\"packName\">{pack.name}</div> <OnOffButton enabled={pack.used} id={pack.id} click={props.toggleWordPacks} />\r\n                        </div>\r\n                    )\r\n                })}\r\n                <button onClick={props.close}>Zapisz</button>\r\n                <p>{props.errorMessage}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Settings;\r\n\r\nconst OnOffButton = props => {\r\n    return (\r\n        <div className=\"buttonWrapper\">\r\n            <div className=\"pillToggle\" onClick={() => props.click(props.id)} >\r\n                <div className={props.enabled ? \"on buttonDot\" : \"off buttonDot\"}>{props.enabled ? \"✓\" : \"X\"}</div>\r\n            </div >\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\nimport '../css/App.css';\nimport { Alphabet } from './Alphabet.json'\nimport { words } from './Words.json'\nimport FileUploadForm from './FileUploadForm';\nimport AnswerField from './AnswerField';\nimport HangmanHealth from './HangmanHealth'\nimport Keyboard from './Keyboard';\nimport WordField from './WordField'\nimport EndScreen from './EndScreen';\nimport ExitButton from './ExitButton';\nimport Credits from './Credits';\nimport Settings from './Settings';\n\nclass App extends Component {\n  state = {\n    alphabet: Alphabet,\n    aviliableWords: [\n      {\n        id: 0,\n        name: \"Podstawowa paczka słów\",\n        used: true,\n        words: words\n      }\n    ],\n    words: [],\n    wordToGuess: null,\n    faults: 0,\n    haveWon: false,\n    haveLost: false,\n    gameStarted: false,\n    uploadErrorMessage: null,\n    wordPacksErrorMessage: null,\n    showCredits: false,\n    showSettings: false\n  }\n\n  render() {\n    const { alphabet, faults, wordToGuess, gameStarted, haveLost, haveWon, uploadErrorMessage, showCredits, showSettings, aviliableWords, wordPacksErrorMessage } = this.state\n\n    const gameField = (\n      <>\n        <HangmanHealth faults={faults} />\n        {wordToGuess === null ? null : <WordField wordToGuess={wordToGuess} />}\n        <AnswerField answerFieldFormHandler={this.answerFieldFormHandler.bind(this)} />\n        <Keyboard alphabet={alphabet} letterGuess={this.letterGuess.bind(this)} />\n        <ExitButton exitGame={this.exitGame.bind(this)} />\n      </>\n    )\n\n    const preGameField = (\n      <>\n        <div id=\"preGameDiv\">\n          <button onClick={this.wordDraw.bind(this)} id=\"startButton\">Start</button>\n          <FileUploadForm\n            wordsUploadSubmitHandler={this.wordsUploadSubmitHandler.bind(this)}\n            errorMessage={uploadErrorMessage}\n          />\n          <button onClick={this.toggleSettings.bind(this)} id=\"settingsButton\">Ustawienia</button>\n        </div>\n        <button onClick={this.toggleCredits.bind(this)} id=\"creditsButton\">Credits</button>\n      </>\n    )\n\n    const game = (\n      <>\n        {gameStarted ? gameField : preGameField}\n        {haveLost ? <EndScreen decision=\"lost\" gameRestart={this.wordDraw.bind(this)} exitGame={this.exitGame.bind(this)} /> : null}\n        {haveWon ? <EndScreen decision=\"won\" gameRestart={this.wordDraw.bind(this)} exitGame={this.exitGame.bind(this)} /> : null}\n      </>\n    )\n    return (\n      <div id='game'>\n        {showSettings ? <Settings close={this.saveWords.bind(this)} aviliableWords={aviliableWords} toggleWordPacks={this.toggleWordPacks.bind(this)} errorMessage={wordPacksErrorMessage} /> : null}\n        {showCredits ? <Credits toggleCredits={this.toggleCredits.bind(this)} /> : game}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    setTimeout(this.saveWords(), 100)\n  }\n\n  wordsUploadSubmitHandler(e) {\n    e.preventDefault()\n    const file = e.target.file.files[0]\n    if (file === undefined) {\n      this.setState({\n        uploadErrorMessage: \"Brak pliku\"\n      })\n    } else {\n      if (file.type === \"text/plain\") {\n        const fileReader = new FileReader()\n        let lastWordId = 0\n        fileReader.onload = e => {\n          const text = e.target.result\n          const stringWords = text.split(\"\\r\\n\")\n\n          const objectWords = stringWords.map(stringWord => {\n            const word = stringWord.toLowerCase()\n            return word.split('')\n\n          })\n\n          const completeArray = objectWords.map((word) => {\n            lastWordId++\n            const letters = word.map((letter, letterIndex) => {\n              const object = {\n                id: letterIndex,\n                letter,\n                visible: false\n              }\n              return object\n            })\n            const completedLetters = {\n              id: lastWordId,\n              letters\n            }\n            return completedLetters\n          })\n          const aviliableWords = {\n            id: this.state.aviliableWords.length,\n            name: file.name.slice(0, file.name.indexOf(\".\")),\n            used: true,\n            words: completeArray\n          }\n\n          this.setState({\n            aviliableWords: this.state.aviliableWords.concat(aviliableWords),\n            fileUploaded: true,\n            uploadErrorMessage: null\n          })\n        }\n        fileReader.readAsText(e.target.file.files[0])\n        e.target.file.value = null\n      } else {\n        this.setState({\n          uploadErrorMessage: \"Błędne rozszerzenie pliku\"\n        })\n      }\n    }\n  }\n\n  toggleWordPacks(id) {\n    const aviliableWords = this.state.aviliableWords.map(wordPack => {\n      if (wordPack.id === id) {\n        wordPack.used = !wordPack.used\n      }\n      return wordPack\n    })\n\n    this.setState({\n      aviliableWords\n    })\n  }\n\n  wordDraw() {\n    const wordsAmount = this.state.words.length\n    const DrawnWord = Math.floor(Math.random() * (wordsAmount - 0))\n    const wordToGuess = this.state.words[DrawnWord]\n    this.setState({\n      wordToGuess,\n      gameStarted: true,\n      haveWon: false,\n      haveLost: false,\n      faults: 0,\n      alphabet: Alphabet,\n      uploadErrorMessage: null,\n      wordPacksErrorMessage: null\n    })\n  }\n\n  letterGuess(pickedLetter) {\n    const alphabet = this.state.alphabet.map(letter => {\n      let newLetter = {\n        id: letter.id,\n        letter: letter.letter,\n        picked: letter.picked\n      }\n      if (pickedLetter === letter.letter) {\n        newLetter.picked = true\n      }\n      return newLetter\n    })\n    let didGuess = false;\n    const wordToGuessLetters = this.state.wordToGuess.letters.map(letter => {\n      let newLetter = {\n        id: letter.id,\n        letter: letter.letter,\n        visible: letter.visible\n      }\n      if (pickedLetter === letter.letter) {\n        didGuess = true;\n        newLetter.visible = true\n      }\n      return newLetter\n    })\n\n    const wordToGuess = {\n      id: this.state.wordToGuess.id,\n      letters: wordToGuessLetters\n    }\n\n    this.checkGameState(didGuess, false, wordToGuess)\n    this.setState({\n      alphabet,\n      wordToGuess\n    })\n  }\n\n  answerFieldFormHandler(e) {\n    e.preventDefault()\n    if (e.target.answer.value !== \"\") {\n      const inputedWord = e.target.answer.value.toLowerCase()\n      e.target.answer.value = \"\"\n      const wordToGuessLetters = this.state.wordToGuess.letters.map((letter, index) => {\n        let newLetter = {\n          id: letter.id,\n          letter: letter.letter,\n          visible: letter.visible\n        }\n        if (inputedWord[index] === letter.letter) {\n          newLetter.visible = true\n        }\n        return newLetter\n      })\n\n      const wordToGuess = {\n        id: this.state.wordToGuess.id,\n        letters: wordToGuessLetters\n      }\n      this.checkGameState(true, true, wordToGuess)\n    }\n  }\n\n  revealWord() {\n    const wordToGuessLetters = this.state.wordToGuess.letters.map(letter => {\n      return {\n        id: letter.id,\n        letter: letter.letter,\n        visible: true\n      }\n    })\n\n    const wordToGuess = {\n      id: this.state.wordToGuess.id,\n      letters: wordToGuessLetters\n    }\n    this.setState({\n      wordToGuess\n    })\n  }\n\n  checkGameState(didGuess, fromAnswerField, wordToGuess) {\n    let faults = this.state.faults\n    const lettersInAWord = wordToGuess.letters.length\n    const guessedLetters = wordToGuess.letters.filter(letter => letter.visible === true).length\n    if (((lettersInAWord !== guessedLetters) && fromAnswerField) || !didGuess) {\n      faults += 1\n    }\n    if (faults === 7 || lettersInAWord === guessedLetters) {\n      this.revealWord()\n    }\n    if (faults === 7) {\n      this.setState({\n        haveLost: true\n      })\n    }\n    if (lettersInAWord === guessedLetters) {\n      this.setState({\n        haveWon: true\n      })\n    }\n\n    this.setState({\n      faults\n    })\n  }\n\n  exitGame() {\n    this.setState({\n      wordToGuess: null,\n      gameStarted: false,\n      haveWon: false,\n      haveLost: false,\n      faults: 0,\n      alphabet: Alphabet\n    })\n  }\n\n  toggleCredits() {\n    this.setState({\n      showCredits: !this.state.showCredits\n    })\n  }\n\n  toggleSettings() {\n    this.setState({\n      showSettings: true\n    })\n  }\n\n  saveWords() {\n\n    let lastID = 0;\n    let extractedWords = []\n    this.state.aviliableWords.forEach(wordPacks => {\n      if (wordPacks.used) {\n        wordPacks.words.forEach(word => {\n          extractedWords = extractedWords.concat(word)\n        })\n      }\n    })\n    if (extractedWords.length === 0) {\n      this.setState({\n        wordPacksErrorMessage: \"Wymagana co najmniej jedna paczka słów\"\n      })\n    }\n    else {\n      extractedWords = extractedWords.map(word => {\n        word.id = lastID\n        lastID++\n        return word\n      })\n\n      this.setState({\n        words: extractedWords,\n        showSettings: false,\n        wordPacksErrorMessage: \"\"\n      })\n    }\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}