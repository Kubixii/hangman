{"version":3,"sources":["components/FileUploadForm.js","components/AnswerField.js","components/HangmanHealth.js","components/Keyboard.js","components/WordField.js","components/ExitButton.js","components/EndScreen.js","components/Credits.js","components/App.js","index.js"],"names":["FileUploadForm","props","FileUpload","useRef","id","errorMessage","onClick","e","current","click","onSubmit","wordsUploadSubmitHandler","type","name","ref","value","AnswerField","answerFieldFormHandler","method","HangmanHealth","faults","src","alt","Keyboard","alphabet","map","letter","letterGuess","picked","Letter","className","WordField","word","wordToGuess","letters","visible","GuessingFieldLetter","ExitButton","exitGame","EndScreen","decision","gameRestart","Credits","toggleCredits","App","state","Alphabet","words","haveWon","haveLost","gameStarted","showCredits","this","gameField","bind","preGameField","wordDraw","game","preventDefault","file","target","files","undefined","setState","fileReader","FileReader","lastWordId","length","onload","completeArray","result","split","stringWord","toLowerCase","letterIndex","concat","fileUploaded","readAsText","console","log","wordsAmount","DrawnWord","Math","floor","random","pickedLetter","newLetter","didGuess","wordToGuessLetters","checkGameState","answer","inputedWord","index","fromAnswerField","lettersInAWord","guessedLetters","filter","revealWord","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb107715.chunk.js","sourcesContent":["import React, { useRef } from 'react'\r\n\r\nconst FileUploadForm = props => {\r\n    const FileUpload = useRef(null)\r\n    const clickHandler = (e) => {\r\n        FileUpload.current.click()\r\n    }\r\n    return (\r\n        <div id=\"WordsUpload\">\r\n            <p>Dodaj własne słowa</p>\r\n            <p>{props.errorMessage}</p>\r\n            <button onClick={clickHandler}>Wybierz plik</button>\r\n            <form onSubmit={props.wordsUploadSubmitHandler}>\r\n                <input type=\"file\" name=\"file\" id=\"file\" ref={FileUpload} />\r\n                <input type=\"submit\" value=\"Wyślij\" />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\nexport default FileUploadForm","import React from 'react'\r\n\r\nconst AnswerField = props => {\r\n    return (\r\n        <div id='AnswerField'>\r\n            <form onSubmit={props.answerFieldFormHandler} method=\"POST\">\r\n                <input type=\"text\" name=\"answer\" id=\"answer\" />\r\n                <input type=\"submit\" value=\"Sprawdź odpowiedź\" />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnswerField;","import React from 'react'\r\n\r\nconst HangmanHealth = props => {\r\n    const { faults } = props\r\n    let image = [\"blank.png\", \"0.png\", \"1.png\", \"2.png\", \"3.png\", \"4.png\", \"5.png\", \"6.png\", \"6.png\"];\r\n    return (\r\n        <>\r\n            <img src={`./Images/${image[faults]}`} alt=\"health\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HangmanHealth","import React from 'react'\r\n\r\nconst Keyboard = props => {\r\n    return (\r\n        <div id='keyboard'>\r\n            {props.alphabet.map(letter => {\r\n                return (\r\n                    <Letter key={letter.id} letter={letter.letter} letterGuess={props.letterGuess} picked={letter.picked} />\r\n                )\r\n            })}\r\n\r\n            {/* {Object.keys(props.alphabet).map(i => {\r\n                return (\r\n                    <Letter key={props.alphabet[i].id} letter={props.alphabet[i].letter} letterGuess={props.letterGuess} picked={props.alphabet[i].picked} />\r\n                )\r\n            })} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Keyboard;\r\n\r\nconst Letter = props => {\r\n    const { letter, picked, letterGuess } = props\r\n    return (\r\n        <div className={picked ? \"nonclickable letter\" : \"clickable letter\"} onClick={picked ? null : () => letterGuess(letter)}>\r\n            <span>{letter}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst WordField = props => {\r\n    const word = props.wordToGuess.letters.map(letter => {\r\n        return (\r\n            <GuessingFieldLetter key={letter.id} visible={letter.visible} letter={letter.letter} />\r\n        )\r\n    })\r\n    return (\r\n        <div id='WordField'>\r\n            {props.wordToGuess === null ? null : word}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WordField;\r\n\r\nconst GuessingFieldLetter = props => {\r\n    const { visible, letter } = props\r\n    return (\r\n        <div className={letter === \" \" ? \"GuessingFieldLetter, noUnderline\" : \"GuessingFieldLetter\"}>\r\n            <span>{visible ? letter : null}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\n\r\nconst ExitButton = (props) => {\r\n    return (\r\n        <>\r\n            <button onClick={props.exitGame}>Wyjdź z gry</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ExitButton;","import React from 'react'\r\nimport ExitButton from './ExitButton';\r\n\r\nconst EndScreen = props => {\r\n    return (\r\n        <div id=\"grayout\">\r\n            <div id=\"menu\">\r\n                <h1>{props.decision === \"won\" ? \"Wygrana\" : \"Przegrana\"}</h1>\r\n                <button onClick={props.gameRestart}>Zagraj jeszcze raz</button>\r\n                <ExitButton exitGame={props.exitGame} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EndScreen;","import React from 'react'\r\n\r\nconst Credits = (props) => {\r\n    return (\r\n        <>\r\n            <h1>Strona wykonana przez Jakuba Filipka w oparciu o bibliotekę React.js</h1>\r\n            <button onClick={props.toggleCredits}>Zamknij</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Credits;","import React, { Component } from 'react';\nimport '../css/App.css';\nimport { Alphabet } from './Alphabet.json'\nimport { words } from './Words.json'\nimport FileUploadForm from './FileUploadForm';\nimport AnswerField from './AnswerField';\nimport HangmanHealth from './HangmanHealth'\nimport Keyboard from './Keyboard';\nimport WordField from './WordField'\nimport EndScreen from './EndScreen';\nimport ExitButton from './ExitButton';\nimport Credits from './Credits';\n\nclass App extends Component {\n  state = {\n    alphabet: Alphabet,\n    words: words,\n    wordToGuess: null,\n    faults: 0,\n    haveWon: false,\n    haveLost: false,\n    gameStarted: false,\n    errorMessage: null,\n    showCredits: false\n  }\n\n  render() {\n    const { alphabet, faults, wordToGuess, gameStarted, haveLost, haveWon, errorMessage, showCredits } = this.state\n\n    const gameField = (\n      <>\n        <HangmanHealth faults={faults} />\n        {wordToGuess === null ? null : <WordField wordToGuess={wordToGuess} />}\n        <AnswerField answerFieldFormHandler={this.answerFieldFormHandler.bind(this)} />\n        <Keyboard alphabet={alphabet} letterGuess={this.letterGuess.bind(this)} />\n        <ExitButton exitGame={this.exitGame.bind(this)} />\n      </>\n    )\n\n    const preGameField = (\n      <div id=\"preGameDiv\">\n        <button onClick={this.wordDraw.bind(this)} id=\"startButton\">Start</button>\n        <FileUploadForm\n          wordsUploadSubmitHandler={this.wordsUploadSubmitHandler.bind(this)}\n          errorMessage={errorMessage}\n        />\n        <button onClick={this.toggleCredits.bind(this)} id=\"creditsButton\">Credits</button>\n      </div>\n    )\n\n    const game = (\n      <>\n        {gameStarted ? gameField : preGameField}\n        {haveLost ? <EndScreen decision=\"lost\" gameRestart={this.wordDraw.bind(this)} exitGame={this.exitGame.bind(this)} /> : null}\n        {haveWon ? <EndScreen decision=\"won\" gameRestart={this.wordDraw.bind(this)} exitGame={this.exitGame.bind(this)} /> : null}\n      </>\n    )\n    return (\n      <div id='game'>\n        {showCredits ? <Credits toggleCredits={this.toggleCredits.bind(this)} /> : game}\n      </div>\n    );\n  }\n\n  wordsUploadSubmitHandler(e) {\n    e.preventDefault()\n    const file = e.target.file.files[0]\n    if (file === undefined) {\n      this.setState({\n        errorMessage: \"Brak pliku\"\n      })\n    } else {\n      if (file.type === \"text/plain\") {\n        const fileReader = new FileReader()\n        let lastWordId = this.state.words[this.state.words.length - 1].id\n        fileReader.onload = e => {\n          const text = e.target.result\n          const stringWords = text.split(\"\\r\\n\")\n\n          const objectWords = stringWords.map(stringWord => {\n            const word = stringWord.toLowerCase()\n            return word.split('')\n\n          })\n\n          const completeArray = objectWords.map((word) => {\n            lastWordId++\n            const letters = word.map((letter, letterIndex) => {\n              const object = {\n                id: letterIndex,\n                letter,\n                visible: false\n              }\n              return object\n            })\n            const completedLetters = {\n              id: lastWordId,\n              letters\n            }\n            return completedLetters\n          })\n          this.setState({\n            words: this.state.words.concat(completeArray),\n            fileUploaded: true,\n            errorMessage: null\n          })\n        }\n        fileReader.readAsText(e.target.file.files[0])\n        console.log(e.target.file.value)\n        e.target.file.value = null\n        console.log(e.target.file.value)\n      } else {\n        this.setState({\n          errorMessage: \"Błędne rozszerzenie pliku\"\n        })\n      }\n    }\n  }\n\n  wordDraw() {\n    const wordsAmount = this.state.words.length\n    const DrawnWord = Math.floor(Math.random() * (wordsAmount - 0))\n    const wordToGuess = this.state.words[DrawnWord]\n    this.setState({\n      wordToGuess,\n      gameStarted: true,\n      haveWon: false,\n      haveLost: false,\n      faults: 0,\n      alphabet: Alphabet\n    })\n  }\n\n  letterGuess(pickedLetter) {\n    const alphabet = this.state.alphabet.map(letter => {\n      let newLetter = {\n        id: letter.id,\n        letter: letter.letter,\n        picked: letter.picked\n      }\n      if (pickedLetter === letter.letter) {\n        newLetter.picked = true\n      }\n      return newLetter\n    })\n    let didGuess = false;\n    const wordToGuessLetters = this.state.wordToGuess.letters.map(letter => {\n      let newLetter = {\n        id: letter.id,\n        letter: letter.letter,\n        visible: letter.visible\n      }\n      if (pickedLetter === letter.letter) {\n        didGuess = true;\n        newLetter.visible = true\n      }\n      return newLetter\n    })\n\n    const wordToGuess = {\n      id: this.state.wordToGuess.id,\n      letters: wordToGuessLetters\n    }\n\n    this.checkGameState(didGuess, false, wordToGuess)\n    this.setState({\n      alphabet,\n      wordToGuess\n    })\n  }\n\n  answerFieldFormHandler(e) {\n    e.preventDefault()\n    if (e.target.answer.value !== \"\") {\n      const inputedWord = e.target.answer.value.toLowerCase()\n      e.target.answer.value = \"\"\n      const wordToGuessLetters = this.state.wordToGuess.letters.map((letter, index) => {\n        let newLetter = {\n          id: letter.id,\n          letter: letter.letter,\n          visible: letter.visible\n        }\n        if (inputedWord[index] === letter.letter) {\n          newLetter.visible = true\n        }\n        return newLetter\n      })\n\n      const wordToGuess = {\n        id: this.state.wordToGuess.id,\n        letters: wordToGuessLetters\n      }\n      this.checkGameState(true, true, wordToGuess)\n    }\n  }\n\n  revealWord() {\n    const wordToGuessLetters = this.state.wordToGuess.letters.map(letter => {\n      return {\n        id: letter.id,\n        letter: letter.letter,\n        visible: true\n      }\n    })\n\n    const wordToGuess = {\n      id: this.state.wordToGuess.id,\n      letters: wordToGuessLetters\n    }\n    this.setState({\n      wordToGuess\n    })\n  }\n\n  checkGameState(didGuess, fromAnswerField, wordToGuess) {\n    let faults = this.state.faults\n    const lettersInAWord = wordToGuess.letters.length\n    const guessedLetters = wordToGuess.letters.filter(letter => letter.visible === true).length\n    if (((lettersInAWord !== guessedLetters) && fromAnswerField) || !didGuess) {\n      faults += 1\n    }\n    if (faults === 7 || lettersInAWord === guessedLetters) {\n      this.revealWord()\n    }\n    if (faults === 7) {\n      this.setState({\n        haveLost: true\n      })\n    }\n    if (lettersInAWord === guessedLetters) {\n      this.setState({\n        haveWon: true\n      })\n    }\n\n    this.setState({\n      faults\n    })\n  }\n\n  exitGame() {\n    this.setState({\n      wordToGuess: null,\n      gameStarted: false,\n      haveWon: false,\n      haveLost: false,\n      faults: 0,\n      alphabet: Alphabet\n    })\n  }\n\n  toggleCredits() {\n    this.setState({\n      showCredits: !this.state.showCredits\n    })\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}